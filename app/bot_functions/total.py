from typing import List, Optional
import shutil
from pathlib import Path
import os
import traceback
import zipfile
import aiohttp
from aiogram.types import Message
import time

from logging_handler.main import error_logging
from errors_handlers.main import error_handler_for_the_website
from settings.response import ResponseData
from settings.config import settings


def get_list_images_name(
    count_images: int,
    path_find_image: Path,
) -> List:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å 000001.jpg

    Args:
        count_images (int): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫
        path_find_image (Path): –ø—É—Ç—å –¥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    Returns:
        List: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –ø—É—Ç—è–º–∏ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
    """
    list_images_name: List = []
    for number in range(1, count_images + 1):
        # –ü—É—Ç—å –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        path_image: Path = path_find_image / f"{number:06}.jpg"
        list_images_name.append(str(path_image))
    return list_images_name


def delete_images_and_archive(
    path_folder: Path,
    delete_folder: bool = True,
):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —á—Ç–æ –µ—Å—Ç—å –≤ –ø–∞–ø–∫–µ.

    Args:
        path_folder (Path): –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏
        deleter_folder: (Path): –§–ª–∞–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏(True –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, False –æ—Å—Ç–∞–≤–∏—Ç—å)
    """

    for filename in os.listdir(path_folder):
        filepath: str = os.path.join(path_folder, filename)
        try:
            if os.path.isfile(filepath) or os.path.islink(filepath):
                os.remove(filepath)
        except Exception:
            error_logging.error(traceback.format_exc())
            traceback.print_exc()

    if delete_folder:
        # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∞
        if os.path.exists(path_folder):
            for _ in range(10):
                try:
                    shutil.rmtree(path_folder)
                    return
                except PermissionError:
                    time.sleep(1)  # –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                except Exception:
                    traceback.print_exc()

        # –ü—Ä–æ–≤–µ—Ä–µ—è–º –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –µ—â–µ –æ—Å—Ç–∞–ª–∞—Å—å
        if os.path.exists(path_folder):
            error_logging.error(msg=f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å - {path_folder}")


def save_images_with_zip_archive(
    path_folder: Path,
    path_archive: Path,
    list_images_name: List,
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ zip –∞—Ä—Ö–∏–≤.

    Args:
        path_folder (Path): –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏
        path_archive (Path): –ü—É—Ç—å –¥–æ –∞—Ä—Ö–∏–≤–∞
        list_images_name (List): –°–ø–∏—Å–æ–∫ —Å –ø—É—Ç—è–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    if not os.path.exists(path_folder):
        os.mkdir(path_folder)

    with zipfile.ZipFile(path_archive, "w", zipfile.ZIP_DEFLATED) as file:
        try:
            for file_path in list_images_name:
                file.write(file_path, arcname=os.path.basename(file_path))
        except Exception:
            error_logging.error(traceback.format_exc())
            traceback.print_exc()


async def save_images(
    list_url: List[List],
    path: Path,
    message: Message,
) -> ResponseData:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ url –≤ –ø–∞–ø–∫—É –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ–±—å–µ–∫—Ç –∫–ª–∞—Å—Å–∞ ResponseData
       —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–∏—Å–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º

    Args:
        list_url (List): –°–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π URL —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–º—è —Ñ–∞–π–ª–∞
        path (Path): –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        message (Message): —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è aiogramm

    Returns:
        ResponseData: –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞.

        –ê—Ç—Ä–∏–±—É—Ç—ã ResponseData:
            - message (Any | None): –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ).
            - error (str | None): –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π.
            - status (int): HTTP-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞. 0 ‚Äî –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ.
            - url (str): URL, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –∑–∞–ø—Ä–æ—Å.
            - method (str): HTTP-–º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.
    """
    try:
        # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnboundLocalError
        response: Optional[ResponseData] = None

        async with aiohttp.ClientSession() as session:
            msg: str = "üì∏ –°–∫–∞—á–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π {} –∏–∑ {}..."
            total_count: int = len(list_url)
            count: int = 0
            final_list_path_img: List = []

            status_message: Message = await message.answer(
                text=msg.format(0, total_count)
            )

            if not os.path.exists(path=path):
                os.mkdir(path)

            for url, name in list_url:
                response: ResponseData = await error_handler_for_the_website(
                    session=session,
                    url=url,
                    data_type="BYTES",
                )

                if response.error:
                    continue
                count += 1

                path_img: Path = path / f"{name}.jpg"
                with open(path_img, "wb") as file:
                    file.write(response.message)
                final_list_path_img.append(path_img)

                if count % 2 == 0 or count == total_count:
                    await status_message.edit_text(
                        msg.format(
                            count,
                            total_count,
                        )
                    )

        if not final_list_path_img:
            return ResponseData(
                error="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                status=404,
                url=getattr(response, "url", "<unknown>"),
                method=getattr(response, "method", "BYTES"),
            )

        return ResponseData(
            message=final_list_path_img,
            status=200,
            url=response.url,
            method=response.method,
        )
    except Exception:
        error_logging.error(
            settings.logging.ERROR_WEB_RESPONSE_MESSAGE(
                method="<unknown>",
                status=0,
                url="<unknown>",
                error_message=f"Unexpected error: {traceback.format_exc()}",
            )
        )

        return ResponseData(
            error="–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞.–ò–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é...",
            status=0,
            url="<unknown>",
            method="<unknown>",
        )

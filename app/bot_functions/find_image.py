from typing import Dict, List, Optional
import os
import traceback
import aiohttp
from aiogram.types import Message
import asyncio
from concurrent.futures import ThreadPoolExecutor
from asyncio import AbstractEventLoop, Task

from icrawler.builtin import BingImageCrawler

from logging_handler.main import error_logging
from errors_handlers.main import error_handler_for_the_website
from settings.response import ResponseData
from settings.config import settings


async def find_image_with_goole_and_save_image(
    name: str,
    count: int,
    filters: Dict,
    path: str,
    message: Message,
) -> ResponseData:
    """–ò—â–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ google.com –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö.

    Args:
        name (str): –ò–º—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        filters (Dict): –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        path (str): –ü—É—Ç—å –∫—É–¥–∞ –±—É–¥—É—Ç –∑–∞–ª–∏—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        message: (Message): –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è aiogram

    Returns:
        ResponseData: –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞.

        –ê—Ç—Ä–∏–±—É—Ç—ã ResponseData:
            - message (Any | None): –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ).
            - error (str | None): –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π.
            - status (int): HTTP-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞. 0 ‚Äî –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ.
            - url (str): URL, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –∑–∞–ø—Ä–æ—Å.
            - method (str): HTTP-–º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.
    """

    try:
        # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnboundLocalError
        response: Optional[ResponseData] = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–∞–π—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å
        # –∫–∞—Ä—Ç–∏–Ω–∫–∏
        async with aiohttp.ClientSession() as session:
            response: Dict = await error_handler_for_the_website(
                session=session,
                url="https://www.google.com/",
                data_type="TEXT",
            )
            if response.error:
                return response

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫
        crawler_download: int = 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        status_message: Message = await message.answer(
            f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {crawler_download} –∏–∑ {count}..."
        )

        crawler: BingImageCrawler = BingImageCrawler(storage={"root_dir": path})

        loop: AbstractEventLoop = asyncio.get_event_loop()
        executor: ThreadPoolExecutor = ThreadPoolExecutor(max_workers=1)

        async def run_crowl() -> None:
            await loop.run_in_executor(
                executor,
                lambda: crawler.crawl(
                    keyword=name,
                    max_num=count,
                    filters=filters,
                ),
            )

        crawl_task: Task[None] = asyncio.create_task(run_crowl())

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_count: int = 0
        while not crawl_task.done():
            await asyncio.sleep(1)
            crawler_download = sum(len(files) for _, _, files in os.walk(path))
            if crawler_download != last_count:
                try:
                    await status_message.edit_text(
                        f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {crawler_download} –∏–∑ {count}..."
                    )
                    last_count = crawler_download
                except Exception:
                    traceback.print_exc()
                    pass

        await crawl_task

        if not crawler_download:
            return ResponseData(
                error="–ù–µ –Ω–∞–π–¥–µ–Ω–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                status=404,
                url=getattr(response, "url", "<unknown>"),
                method=getattr(response, "method", "TEXT"),
            )

        await status_message.edit_text(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {crawler_download} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
        )
        return ResponseData(
            message=crawler_download,
            status=200,
            url=response.url,
            method=response.method,
        )
    except Exception:
        error_logging.error(
            settings.logging.ERROR_WEB_RESPONSE_MESSAGE.format(
                method="<unknown>",
                status=0,
                url="<unknown>",
                error_message=f"Unexpected error: {traceback.format_exc()}",
            )
        )
        return ResponseData(
            error="–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞.–ò–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é...",
            status=0,
            url="<unknown>",
            method="<unknown>",
        )


async def get_url_link_posters_for_kinopoisk(
    list_url: List, headers: Dict, message: Message
) -> ResponseData:
    """

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—å–µ–∫—Ç –∫–ª–∞—Å—Å–∞ ResponseData, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–∏—Å–æ–∫ —Å url —Å—Å—ã–ª–∫–∞–º–∏
    –Ω–∞ —Ñ–æ—Ç–æ –ø–æ—Å—Ç–µ—Ä–æ–≤ –∏ –∏–º–µ–Ω–∞–º–∏ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤ —Å —Å–∞–π—Ç–∞ –∫–∏–Ω–æ–ø–æ–∏—Å–∫.

    Args:
        list_url (List): C–ø–∏—Å–æ–∫ —Å URL –¥–ª—è —Å–∞–π—Ç–∞ –∫–∏–ø–æ–∏—Å–∫
        headers (Dict): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞
        { "accept": "application/json","X-API-KEY": <api_key>,}
        message (Message): message –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram

    Returns:
        ResponseData: –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞.

        –ê—Ç—Ä–∏–±—É—Ç—ã ResponseData:
            - message (Any | None): –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ).
            - error (str | None): –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π.
            - status (int): HTTP-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞. 0 ‚Äî –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ.
            - url (str): URL, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –∑–∞–ø—Ä–æ—Å.
            - method (str): HTTP-–º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.
    """
    try:
        array_link_img_url: List = []

        # –î–µ–ª–∞–µ–º –æ—Ç–æ—Ä–±–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download: int = 0
        count: int = len(list_url)
        msg: str = "üì∏ –ü–æ–ª—É—á–µ–Ω–Ω–æ —Å—Å—ã–ª–æ–∫ {} –∏–∑ {}..."
        status_message: Message = await message.answer(
            text=msg.format(
                download,
                count,
            )
        )

        # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnboundLocalError
        poster_response: Optional[ResponseData] = None
        async with aiohttp.ClientSession() as session:
            for url in list_url:
                # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏ –ø–æ—Å—Ç–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å–º–∞
                poster_response: ResponseData = await error_handler_for_the_website(
                    session=session,
                    url=url,
                    headers=headers,
                )
                if poster_response.error:
                    return poster_response
                link_img_url: str = poster_response.message["docs"][0]["poster"]["url"]
                # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ñ–∏–ª—å–º–∞
                if link_img_url:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    download += 1
                    if download % 2 == 0 or download == count:
                        await status_message.edit_text(
                            msg.format(
                                download,
                                count,
                            )
                        )

                    array_link_img_url.append(
                        [
                            link_img_url,
                            poster_response.message["docs"][0]["name"],
                        ]
                    )
        if not array_link_img_url:
            return ResponseData(
                error="–ü–æ—Å—Ç–µ—Ä—ã –¥–ª—è —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã",
                status=404,
                url=getattr(poster_response, "url", "<unknown>"),
                method=getattr(poster_response, "method", "GET"),
            )
        return ResponseData(
            message=array_link_img_url,
            status=200,
            url=poster_response.url,
            method=poster_response.method,
        )
    except Exception:
        error_logging.error(
            settings.logging.ERROR_WEB_RESPONSE_MESSAGE.format(
                method="<unknown>",
                status=0,
                url="<unknown>",
                error_message=f"Unexpected error: {traceback.format_exc()}",
            )
        )
        return ResponseData(
            error="–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞.–ò–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é...",
            status=0,
            url="<unknown>",
            method="<unknown>",
        )

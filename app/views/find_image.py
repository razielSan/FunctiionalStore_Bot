from pathlib import Path
from typing import Dict
from typing import List
import uuid

from aiogram import Router, F
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup

from extension import bot
from errors_handlers.main import chek_number_is_positivity
from bot_functions.find_image import (
    find_image_with_goole_and_save_image,
    get_url_link_posters_for_kinopoisk,
)
from bot_functions.total import (
    get_list_images_name,
    delete_images_and_archive,
    save_images_with_zip_archive,
    save_images,
)
from settings.config import settings
from keyboards.reply_kb import get_cancel_button, get_start_button_bot
from keyboards.inline_kb import get_button_for_find_image
from settings.response import ResponseData


router: Router = Router(name=__name__)


# –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
class FindImage(StatesGroup):
    """FSM –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""

    spam: State = State()
    name: State = State()
    poster: State = State()
    count: State = State()


@router.message(StateFilter(None), F.text == "–ü–æ–∏—Å–∫ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
async def handler_find_image(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã—Ä–∏–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""

    await message.answer(
        text="–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞",
        reply_markup=get_button_for_find_image(),
    )


@router.callback_query(F.data.startswith("find_image "))
async def start_find_image(call: CallbackQuery, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM FindImage.–ü—Ä–æ—Å–∏—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    _, data = call.data.split(" ")

    await call.message.edit_reply_markup(reply_markup=None)
    if data == "name":
        await call.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏",
            reply_markup=get_cancel_button(),
        )
    elif data == "poster":
        await state.set_state(FindImage.poster)
        await state.update_data(poster=True)
        await call.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–ª–æ–∂–µ–∫ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –≤ "
            "—Ñ–æ—Ä–º–∞—Ç–µ\n\n–º–∞—Ç—Ä–∏—Ü–∞.–∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ.–ø—Ä–∞–∂—Å–∫–∏–π —Å—Ç—É–¥–µ–Ω—Ç",
            reply_markup=get_cancel_button(),
        )
    await state.set_state(FindImage.name)


@router.message(FindImage.name, F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(FindImage.count, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_find_image_handler(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM FindImage.–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è."""
    await state.clear()
    await message.answer(text="–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω....")
    await bot.send_message(
        chat_id=message.chat.id,
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        reply_markup=get_start_button_bot(),
    )


@router.message(FindImage.spam, F.text)
async def get_message_for_find_image(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM FindImage.–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    await message.reply("–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")


@router.message(FindImage.name, F.text)
async def add_name_find_image(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM FindImage.–î–æ–±–∞–≤–ª—è–µ—Ç –∏–º—è FSM FindImage –∏ –ø—Ä–æ—Å–∏—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞."""

    data: Dict = await state.get_data()

    await state.update_data(name=message.text)
    if data.get("poster", None):
        await finish_find_image(message=message, state=state)
        return
    else:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
        )
    await state.set_state(FindImage.count)


@router.message(FindImage.count, F.text)
async def finish_find_image(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM FindImage.–°–∫–∏–¥—ã–≤–∞–µ—Ç zip –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""

    await state.set_state(FindImage.spam)

    data: Dict = await state.get_data()

    if data.get("poster", None):

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ñ–∏–ª—å–º–æ–≤
        list_title_films: List = data.get("name").split(".")
        list_url_films: List = []
        for title in list_title_films:
            list_url_films.append(
                settings.recommender_system.kinopoisk.URL_SEARCH_VIDEO_NAME.format(
                    1, title
                )
            )

        await message.answer(
            f"üîç –ò—â—É –æ–±–ª–æ–∂–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {data.get('name')}...",
            reply_markup=ReplyKeyboardRemove(),
        )

        path_folder = settings.find_image.PATH_FIND_IMAGE / str(message.from_user.id)

        # –ü—É—Ç—å –¥–æ –∞—Ä—Ö–∏–≤–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
        path_archive = path_folder / f"{uuid.uuid4().hex}.zip"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø—Ä–æ—Å–∞
        HEADERS: Dict = settings.recommender_system.kinopoisk.HEADERS.copy()
        HEADERS["X-API-KEY"] = settings.recommender_system.kinopoisk.ApiKey
        data: ResponseData = await get_url_link_posters_for_kinopoisk(
            list_url=list_url_films,
            headers=HEADERS,
            message=message,
        )

        if data.message:

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –ø—É—Ç—è–º–∏ –¥–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫
            data: ResponseData = await save_images(
                list_url=data.message,
                path=path_folder,
                message=message,
            )

            if data.message:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤

                await message.answer(text="–ò–¥–µ—Ç —É–ø–∞–∫–æ–≤–∫–∞ –≤ –∞—Ä—Ö–∏–≤")

                save_images_with_zip_archive(
                    path_folder=path_folder,
                    path_archive=path_archive,
                    list_images_name=data.message,
                )

                await bot.send_document(
                    chat_id=message.chat.id,
                    document=FSInputFile(path=str(path_archive)),
                    caption="–°–∫–∞—á–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                )
                # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞—Ä—Ö–∏–≤
                delete_images_and_archive(
                    path_folder=path_folder,
                )
                await state.clear()
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
                    reply_markup=get_start_button_bot(),
                )
            else:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=f"{data.error}\n\n–í–≤–µ–¥–∏—Ç–µ, —Å–Ω–æ–≤–∞, –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è "
                    "–æ–±–ª–æ–∂–µ–∫ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n–º–∞—Ç—Ä–∏—Ü–∞.–∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ.–ø—Ä–∞–∂—Å–∫–∏–π —Å—Ç—É–¥–µ–Ω—Ç",
                    reply_markup=get_cancel_button(),
                )
                await state.set_state(FindImage.name)
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=f"{data.error}\n\n–í–≤–µ–¥–∏—Ç–µ, —Å–Ω–æ–≤–∞, –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è "
                "–æ–±–ª–æ–∂–µ–∫ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n–º–∞—Ç—Ä–∏—Ü–∞.–∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ.–ø—Ä–∞–∂—Å–∫–∏–π —Å—Ç—É–¥–µ–Ω—Ç",
                reply_markup=get_cancel_button(),
            )
            await state.set_state(FindImage.name)
    else:
        number: ResponseData = chek_number_is_positivity(number=message.text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∏—Å–ª–æ

        if number.error:
            await message.answer(
                text=f"{number.error}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
                reply_markup=get_cancel_button(),
            )
            await state.set_state(FindImage.count)
        else:
            data = await state.get_data()
            name: str = data["name"]
            await message.answer(
                f"üîç –ò—â—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: {name}...",
                reply_markup=ReplyKeyboardRemove(),
            )
            path_image: Path = settings.find_image.PATH_FIND_IMAGE / str(
                message.from_user.id
            )

            # –ü—É—Ç—å –¥–æ –∞—Ä—Ö–∏–≤–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
            path_archive: Path = path_image / f"{name}.zip"

            filters: Dict = {"size": "large"}
            data: ResponseData = await find_image_with_goole_and_save_image(
                name=name,
                count=number.message,
                filters=filters,
                path=path_image,
                message=message,
            )

            if data.message:

                # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                list_images_name: List = get_list_images_name(
                    count_images=data.message,
                    path_find_image=path_image,
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤

                await message.answer(text="–ò–¥–µ—Ç —É–ø–∞–∫–æ–≤–∫–∞ –≤ –∞—Ä—Ö–∏–≤")

                save_images_with_zip_archive(
                    path_folder=path_image,
                    path_archive=path_archive,
                    list_images_name=list_images_name,
                )

                await bot.send_document(
                    chat_id=message.chat.id,
                    document=FSInputFile(path=str(path_archive)),
                    caption="–°–∫–∞—á–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    reply_markup=ReplyKeyboardRemove(),
                )

                # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞—Ä—Ö–∏–≤
                delete_images_and_archive(
                    path_folder=path_image,
                )

                await state.clear()
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
                    reply_markup=get_start_button_bot(),
                )

            else:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=f"{data.error}\n\n–í–≤–µ–¥–∏—Ç–µ, c–Ω–æ–≤–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "
                    "–∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ ",
                    reply_markup=get_cancel_button(),
                )
                await state.set_state(FindImage.name)

from typing import Dict, Callable, Optional, List
import asyncio
import os
from asyncio import Future, AbstractEventLoop
import random

from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, FSInputFile
from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from keyboards.inline_kb import (
    get_buttons_for_generating_video,
    get_buttons_for_generating_video_for_vheer,
)
from keyboards.reply_kb import get_cancel_button
from settings.config import settings
from extension import bot
from functions import create_video_by_is_vheer
from utils.generate_video import make_update_progress, make_cancel_chek


router: Router = Router(name=__name__)


@router.message(StateFilter(None), F.text == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –í–∏–¥–µ–æ")
async def main(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
        reply_markup=get_buttons_for_generating_video(),
    )


class FSMGenerateVideo(StatesGroup):
    """FSM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""

    counter_progress: State = State()
    cancel: State = State()
    source: State = State()
    description: State = State()
    image: State = State()
    prompt: State = State()


@router.message(FSMGenerateVideo.image, F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(FSMGenerateVideo.prompt, F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(FSMGenerateVideo.counter_progress, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç—Å–∞ —Å FSMGenerateVideo.–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è."""

    data: Dict = await state.get_data()
    current_state: Optional[str] = await state.get_state()

    image: Optional[str] = data.get("image", None)
    if image:
        if os.path.exists(path=image):
            os.remove(path=image)

    if current_state == "FSMGenerateVideo:counter_progress":
        await state.set_state(FSMGenerateVideo.cancel)
        await state.update_data(cancel=True)
        return

    await state.clear()
    await message.answer(
        text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=ReplyKeyboardRemove(),
    )
    await main(message=message)


@router.message(FSMGenerateVideo.counter_progress, F.text)
async def get_message(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSMGenerateVideo.–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω
    —Å–æ–≤–µ—Ä—à–∏–ª –∫–∞–∫–æ–µ –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ counter_progress.
    """

    await message.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'")


@router.callback_query(F.data.startswith("genvideo "))
async def add_source(call: CallbackQuery, state: FSMContext):
    """–†–∞–±–æ—Ç—Å–∞ —Å FSMGenerateVideo.–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º
    –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤–∏–¥–µ–æ
    """
    _, generating_video = call.data.split(" ")

    await state.set_state(FSMGenerateVideo.source)
    await call.message.edit_reply_markup(reply_markup=None)
    if generating_video == settings.video_generation.vheer.CALLBACK_INLINE_BUTTON:
        await state.update_data(
            source=settings.video_generation.vheer.CALLBACK_INLINE_BUTTON
        )
        await call.message.answer(
            text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
            reply_markup=get_buttons_for_generating_video_for_vheer(),
        )


@router.callback_query(
    F.data.startswith(f"{settings.video_generation.vheer.CALLBACK_INLINE_BUTTON} ")
)
async def add_image(call: CallbackQuery, state: FSMContext):
    _, flag = call.data.split(" ")

    await call.message.edit_reply_markup(reply_markup=None)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä —Å–¥–µ–ª–∞—Ç—å –≤–∏–¥–æ–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–æ—Ç–æ —Ç–æ –≤—Å—Ç–∞–µ–º –≤ description
    if flag == "img":
        await state.set_state(FSMGenerateVideo.description)
        await state.update_data(description=True)
    await call.message.answer(
        "–°–∫–∏–¥—ã–≤–∞–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ",
        reply_markup=get_cancel_button(),
    )
    await state.set_state(FSMGenerateVideo.image)


@router.message(FSMGenerateVideo.image)
async def add_description(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç—Å–∞ —Å FSMGenerateVideo.–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è
    –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    if message.content_type == "photo":
        photo_phile = message.photo[-1]
        file_info = await bot.get_file(photo_phile.file_id)
        file_path: str = file_info.file_path
        _, file_name = file_path.split("/")

        image_path: str = f"{settings.VIDEO_GENERATE_IMAGE_PATH}{file_name}"

        await state.update_data(image=image_path)

        data = await state.get_data()
        await message.bot.download(
            file=message.photo[-1].file_id,
            destination=f"{settings.VIDEO_GENERATE_IMAGE_PATH}{file_name}",
        )
        if data.get("description", None):
            await get_video_generation(message=message, state=state)
        else:
            await state.set_state(FSMGenerateVideo.prompt)
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            )
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="–°–∫–∏–¥—ã–≤–∞–µ–º—ã–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –≤ —Ñ–æ—Ä–º–∞—Ç–µ .JPEG –∏–ª–∏ .PNG.–†–∞–∑–º–µ—Ä –¥–æ 50 –º–±.",
        )


@router.message(FSMGenerateVideo.prompt, F.text)
async def get_video_generation(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç—Å–∞ —Å FSMGenerateVideo.–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∫–∞—á–µ–Ω–æ–µ –≤–∏–¥–µ–æ."""

    # –í—Å—Ç–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ counter_progress –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    await state.set_state(FSMGenerateVideo.counter_progress)
    await state.update_data(counter_progress=1)

    data: Dict = await state.get_data()
    source: str = data.get("source")
    image_path: str = data.get("image")
    description = data.get("description", None)

    prompt = None
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä —Å–≥–µ–Ω–µ–Ω—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏—é —Ç–æ –±–µ—Ä–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    # –∏–∑ message
    if not description:
        prompt: str = message.text

    await message.answer(
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 30 —Å–µ–∫—É–Ω–¥ –¥–æ 5 –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–±–µ—Ä–∏—Ç–µ—Å—å —Ç–µ—Ä–ø–µ–Ω–∏—è"
    )

    if source == settings.video_generation.vheer.CALLBACK_INLINE_BUTTON:

        await state.set_state(FSMGenerateVideo.counter_progress)
        await state.update_data(counter_progress=0)

        loop: AbstractEventLoop = asyncio.get_event_loop()

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        update_prgoress: Callable = make_update_progress(loop=loop, state=state)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        cancel_chek: Callable = make_cancel_chek(loop=loop, state=state)

        video_path: str = (
            f"{settings.VIDEO_GENERATE_VIDEO_PATH}{random.randint(0, 1000)}.mp4"
        )
        description_url = (
            settings.video_generation.vheer.PROMPT_IMG_URL if description else None
        )
        progressing_task: Future = loop.run_in_executor(
            None,
            create_video_by_is_vheer,
            settings.video_generation.vheer.VIDEO_URL,
            settings.PATH_COOGLE_DRIVER,
            image_path,
            video_path,
            settings.video_generation.vheer.VIDEO_DATA,
            prompt,
            update_prgoress,
            cancel_chek,
            description_url,
        )

        msg: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:\n\nüì•–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –û–ø–∏—Å–∞–Ω–∏—è - –û–∂–∏–¥–∞–π—Ç–µ "
        end_mess: str = "\nüì•–ì–µ–Ω–µ—Ä–∞—Ü–∏—è B–∏–¥–µ–æ - –û–∂–∏–¥–∞–π—Ç–µ  0%"
        description_message: str = (
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:\n\n‚úÖ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –û–ø–∏—Å–∞–Ω–∏—è - –ó–∞–≤–µ—Ä—à–µ–Ω–æ\nüì•–ì–µ–Ω–µ—Ä–∞—Ü–∏—è B–∏–¥–µ–æ - –û–∂–∏–¥–∞–π—Ç–µ "
        )
        progress_message: Message = await message.answer(
            text=msg,
        )

        total: int = settings.video_generation.vheer.TOTAL_STEP
        new_counter: int = -1

        # –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –µ—Å–ª–∏ –∏–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
        counter_list: List[str] = ["", ".", "..", "...", "...."]
        count: int = 0
        while not progressing_task.done():
            data: Dict = await state.get_data()

            if data.get("cancel", None):
                break

            counter: int = data.get("counter_progress")

            if new_counter != counter:
                new_counter = counter
                try:
                    counter = (counter / total) * 100
                    if counter <= 20 and description:
                        if count == 5:
                            count = 0
                        count += 1
                        await asyncio.sleep(0.5)

                        await progress_message.edit_text(
                            f"{msg}{counter_list[count]}{end_mess}"
                        )
                    else:
                        await progress_message.edit_text(
                            f"{description_message}{counter:.2f} %"
                        )
                except Exception as err:
                    print(err)
                    pass
            await asyncio.sleep(0.5)

        data = await state.get_data()
        if data.get("cancel", None):

            msg = "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ "
            cancel_message: Message = await message.answer(text=msg)
            counter_list: List[str] = ["", ".", "..", "...", "...."]
            count: int = -1
            while not progressing_task.done():
                try:
                    if count == 5:
                        count = 0

                    count += 1
                    text: str = f"{msg}{counter_list[count]}"
                    await asyncio.sleep(1)
                    await cancel_message.edit_text(text=text)
                except Exception:
                    pass
            await state.clear()

            if os.path.exists(video_path):
                os.remove(video_path)

            await bot.send_message(
                chat_id=message.chat.id,
                text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è B–∏–¥–µ–æ –ø—Ä–µ—Ä–≤–∞–Ω–∞....",
                reply_markup=ReplyKeyboardRemove(),
            )
            await main(message=message)
        else:
            video_path = await progressing_task
            if video_path.get("message", None):

                await progress_message.edit_text(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:\n\n‚úÖ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"
                    " –û–ø–∏—Å–∞–Ω–∏—è - –ó–∞–≤–µ—Ä—à–µ–Ω–æ\n‚úÖ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –í–∏–¥–µ–æ - –ó–∞–≤–µ—Ä—à–µ–Ω–æ\n\n–ò–¥–µ—Ç –≤—ã–≥—Ä—É–∂–µ–Ω–∏–µ "
                    "–≤–∏–¥–µ–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"
                )
                await asyncio.sleep(1)

                video_path: str = video_path.get("message")
                await bot.send_video(
                    chat_id=message.chat.id,
                    video=FSInputFile(path=video_path),
                    reply_markup=ReplyKeyboardRemove(),
                )
                await main(message=message)

                os.remove(video_path)
                os.remove(image_path)
                await state.clear()
            else:
                await state.clear()
                await message.answer(text=video_path.get("error"))

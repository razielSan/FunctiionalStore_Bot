from typing import List, Dict
from pathlib import Path
from typing import Optional

from pydantic_settings import SettingsConfigDict, BaseSettings
from aiogram.types import BotCommand
from pydantic import BaseModel

from settings import path_settings


# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π


class PollinationsImageGeneration(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å–∞–π—Ç–∞ https://pollinations.ai/."""

    IMAGE_GENERATE: str = (
        "https://image.pollinations.ai/prompt/{}"  # URL –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    )


class CailaIoImageGeneration(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å–∞–π—Ç–∞ https://caila.io/."""

    ApiKey: Optional[str] = None
    URL_IMAGE_GENERATE: str = "https://caila.io/api/adapters/openai/images/generations"


class NeuroimgImageGeneration(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å–∞–π—Ç–∞ https://neuroimg.art/."""

    ApiKey: Optional[str] = None
    URL_IMAGE_GENERATE: str = "https://neuroimg.art/api/v1/free-generate"


class ImageGeneration(BaseModel):
    """–ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é."""

    pollinations: PollinationsImageGeneration = PollinationsImageGeneration()
    caila: CailaIoImageGeneration = CailaIoImageGeneration()
    neuroimg: NeuroimgImageGeneration = NeuroimgImageGeneration()


# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏ –æ–ø–∏—Å–∞–Ω–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π


class ImaggaImageDescription(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å–∞–π—Ç–∞ https://imagga.com/."""

    AUTHORIZATION: Optional[str] = None  # –¢–æ–∫–µ–Ω –∞—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    UPLOAD_ENDPOINT: str = "https://api.imagga.com/v2/uploads"  # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è uplooad_image_id –∫–∞—Ä—Ç–∏–Ω–∫–∏
    URL_TAGS: str = "https://api.imagga.com/v2/tags"  # URL –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è


class ImageDescription(BaseModel):
    """–ú–æ–¥–µ–ª–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""

    immaga: ImaggaImageDescription = ImaggaImageDescription()
    PATH_TO_IMAGE_DESCRIPTON: Path = (
        path_settings.APP_DIR
        / "static"
        / "img"
        / "image_description"  # –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –æ–ø–∏—Å–∞–Ω–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    )


# –ú–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ


class YoutubeAPI(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å–∞–π—Ç–∞ https://www.youtube.com."""

    YoutubeApiKey: Optional[str] = None
    VIDEO_URL: str = "https://www.youtube.com/watch?v={}"
    CHANNEL_URL: str = "https://www.youtube.com/channel/{}"


class FindVideo(BaseModel):
    """–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ."""

    youtube: YoutubeAPI = YoutubeAPI()


# –ú–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏


class WebshareProxies(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å–∞–π—Ç–∞ "https://www.webshare.io/."""

    ApiKey: Optional[str] = None
    PATH: str = "static/files/webshare/"
    URL_CONFIG: str = "https://proxy.webshare.io/api/v2/proxy/config/"  # url –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    URL_PROXIES_LIST: str = "https://proxy.webshare.io/api/v2/proxy/list/download/{token}/-/any/username/direct/-/"  # url –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞  –ø—Ä–æ–∫—Å–∏


class Proxies(BaseModel):
    """–ú–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏."""

    webshare: WebshareProxies = WebshareProxies()


# –ú–æ–¥–µ–ª–∏ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ ip


class IpapiIpInfo(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å–∞–π—Ç–∞ http://api.ipapi.com."""

    AccessKey: Optional[str] = None
    ULR_IP_INFO: str = "http://api.ipapi.com/api/{ip}?access_key={access_key}&hostname=1"  # url –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ ip


class IpInfo(BaseModel):
    """–ú–æ–¥–µ–ª–∏ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ ip."""

    ipapi: IpapiIpInfo = IpapiIpInfo()
    PATH_FOLDER_FLAG_COUNTRY: Path = (
        path_settings.APP_DIR / "static" / "img" / "flag"
    )  # –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ —Å —Ñ–ª–∞–≥–∞–º–∏ —Å—Ç—Ä–∞–Ω
    PATH_FOLDER_NONE_FLAG_IMG: Path = (
        path_settings.APP_DIR / "static" / "img" / "none.png"
    )  # –ü—É—Ç—å –¥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ —Ñ–ª–∞–≥–∞ –Ω–µ—Ç


# –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã


class KinopoiskRecommenderSystem(BaseModel):
    """–ú–æ–¥–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞."""

    ApiKey: Optional[str] = None
    URL_SEARCH_VIDEO_NAME: str = (
        "https://api.kinopoisk.dev/v1.4/movie/search?page=1&limit={}&query={}"
    )
    URL_SEARCH_UNIVERSAL_VIDEO: str = (
        "https://api.kinopoisk.dev/v1.4/movie?page=1&limit={}"
    )

    HEADERS: Dict = {
        "accept": "application/json",
        "X-API-KEY": None,
    }


class RecommenderSystem(BaseModel):
    """–ú–æ–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º."""

    kinopoisk: KinopoiskRecommenderSystem = KinopoiskRecommenderSystem()


# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π


class PasswordGeneration(BaseModel):
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π."""

    simple: str = "simple"
    difficult: str = "difficult"
    keyboard_layout_english: List = [
        "qwertyuiop",
        "asdfghjkl",
        "zxcvbnm",
        "qazwsxedcrfvtgbyhnujm",
    ]
    digit: str = "0123456789"


# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ


class VheerVideoGeneration(BaseModel):
    """–ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∞–π—Ç–∞ https://vheer.com/."""

    TOTAL_STEP: int = (
        10  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
    )
    CALLBACK_INLINE_BUTTON: str = "vheer"  # callback –∑–∞–ø–∏—Å—å –≤ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    VIDEO_URL: str = "https://vheer.com/app/image-to-video"
    PROMPT_IMG_URL: str = (
        "https://products.aspose.ai/pdf/ru/image-description"  # URL –¥–ª—è —Å–∞–π—Ç–∞ –ø–æ
    )
    # –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ñ–∞–æ—Ç–æ

    VIDEO_DATA: str = """
        const video = arguments[0];
        const done = arguments[1];
        fetch(video.src)
            .then(r => r.blob())
            .then(blob => {
            const reader = new FileReader();
            reader.onload = () => done(reader.result);
            reader.readAsDataURL(blob);
            })
            .catch(err => done('ERROR:' + err.message));
        """  # JavaScripts –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ


class VideoGeneration(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ."""

    vheer: VheerVideoGeneration = VheerVideoGeneration()


# –ú–æ–¥–µ–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class LoggingSettings(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""

    PATH_DATA_LOGGING: Path = (
        path_settings.APP_DIR / "logging_handler" / "data.log"
    )  # –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª —Å –æ–±—â–∏–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    PATH_ERRORS_LOGGING: Path = (
        path_settings.APP_DIR / "logging_handler" / "errors.log"
    )  # –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
    FORMAT_FILE: str = (
        "[%(asctime)s] - %(module)s:%(lineno)s - [%(levelname)s - %(message)s]"
    )
    DATE_FORMAT: str = "%Y-%m-%d %H:%M:%S"
    ERROR_WEB_RESPONSE_MESSAGE: str = (
        "[{method}] {status} {url} -> {error_message}"  # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö.
    )
    # method, status, url, error_message


# –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫
class FindImage(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫"""

    PATH_FIND_IMAGE: Path = path_settings.APP_DIR / "static" / "img" / "find_image"


class Settings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."""

    model_config = SettingsConfigDict(
        env_file=".env",
        env_nested_delimiter="__",
    )

    BASE_DIR: Path = Path(__file__).resolve().parent

    TOKEN: str
    BOT_COMMAND: List[BotCommand] = [
        BotCommand(
            command="/start",
            description="–í—ã–∑–æ–≤ –º–µ–Ω—é –±–æ—Ç–∞",
        )
    ]  # –°–ø–∏—Å–æ–∫ –∫–æ–º–º–Ω–∞–¥ –¥–ª—è –±–æ—Ç–∞
    API_OPENWEATHERMAP: str  # API –¥–ª—è —Å–∞–π—Ç–∞ https://api.openweathermap.org
    ULR_GEOLOCATED_OPENWEATHERMAP: str = "http://api.openweathermap.org/geo/1.0/direct?q={}&limit=5&appid={}"  # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    URL_CURRENT_OPENWEATHERMAP: str = "https://api.openweathermap.org/data/2.5/weather?lat={}&lon={}&appid={}"  # URL –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
    URL_FEATURE_OPENWEATHERMAP: str = "https://api.openweathermap.org/data/2.5/forecast?lat={}&lon={}&appid={}"  # URL –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π
    URL_WEATHER_MAPS: str = "https://tile.openweathermap.org/map/temp_new/0/0/0.png?appid={}"  # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç –ø–æ–≥–æ–¥—ã
    URL_AIR_POLLUTION: str = "http://api.openweathermap.org/data/2.5/air_pollution?lat={}&lon={}&appid={}"  # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–∏ –≤–æ–∑–¥—É—Ö–∞
    PATH_TO_WEATHER_TRANSLATION: Path = (
        path_settings.APP_DIR
        / "static"
        / "files"
        / "openweathermap"
        / "weather_translations.json"
    )  # –ü—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –æ–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    PATH_TO_WEATHER_MAP: Path = (
        path_settings.APP_DIR / "static" / "files" / "openweathermap"
    )  # –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
    WEATHER_INDICATORS: Dict = {
        "pressure": {
            "name": "–î–∞–≤–ª–µ–Ω–∏–µ",
            "unit": "–≥–ü–∞",
            "emoji": "üìä",
            "levels": {
                "low": ["–Ω–∏–∑–∫–æ–µ", "‚¨áÔ∏è"],
                "normal": ["–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ", "üü¢"],
                "high": ["–≤—ã—Å–æ–∫–æ–µ", "‚¨ÜÔ∏è"],
            },
        },
        "humidity": {
            "name": "–í–ª–∞–∂–Ω–æ—Å—Ç—å",
            "unit": "%",
            "emoji": "üíß",
            "levels": {
                "dry": ["—Å—É—Ö–æ", "üèúÔ∏è"],
                "comfortable": ["–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ", "üòä"],
                "humid": ["–≤–ª–∞–∂–Ω–æ", "üí¶"],
            },
        },
        "visibility": {
            "name": "–í–∏–¥–∏–º–æ—Å—Ç—å",
            "unit": "–º",
            "emoji": "üëÅÔ∏è",
            "levels": {
                "excellent": ["–æ—Ç–ª–∏—á–Ω–∞—è", "üî≠"],
                "good": ["—Ö–æ—Ä–æ—à–∞—è", "üëÄ"],
                "poor": ["–ø–ª–æ—Ö–∞—è", "üï∂Ô∏è"],
                "fog": ["—Ç—É–º–∞–Ω", "üå´Ô∏è"],
            },
        },
        "wind": {
            "name": "–í–µ—Ç–µ—Ä",
            "unit": "–º/—Å",
            "emoji": "üå¨Ô∏è",
            "levels": {
                "calm": ["—à—Ç–∏–ª—å", "üçÉ"],
                "light": ["–ª—ë–≥–∫–∏–π", "üå¨Ô∏è"],
                "moderate": ["—É–º–µ—Ä–µ–Ω–Ω—ã–π", "üí®"],
                "strong": ["—Å–∏–ª—å–Ω—ã–π", "üå™Ô∏è"],
                "storm": ["—à—Ç–æ—Ä–º", "üåÄ"],
            },
        },
        "clouds": {
            "name": "–û–±–ª–∞—á–Ω–æ—Å—Ç—å",
            "unit": "%",
            "emoji": "‚òÅÔ∏è",
            "levels": {
                "clear": ["—è—Å–Ω–æ", "‚òÄÔ∏è"],
                "few": ["–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ", "üå§Ô∏è"],
                "scattered": ["–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", "‚õÖ"],
                "broken": ["–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è", "‚òÅÔ∏è"],
                "overcast": ["–ø–∞—Å–º—É—Ä–Ω–æ", "‚òÅÔ∏èüåßÔ∏è"],
            },
        },
    }
    AIR_POLLUTION: Dict = {
        "so2": {
            "–•–æ—Ä–æ—à–∏–π": [0, 20],
            "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π": [20, 80],
            "–£–º–µ—Ä–µ–Ω–Ω—ã–π": [80, 250],
            "–ë–µ–¥–Ω—ã–π": [250, 350],
            "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ": [350, float("inf")],
            "translation": "–¥–∏–æ–∫—Å–∏–¥ —Å–µ—Ä—ã",
            "emoji": "‚öóÔ∏è",
        },
        "pm10": {
            "–•–æ—Ä–æ—à–∏–π": [0, 20],
            "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π": [20, 50],
            "–£–º–µ—Ä–µ–Ω–Ω—ã–π": [50, 100],
            "–ë–µ–¥–Ω—ã–π": [100, 200],
            "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ": [200, float("inf")],
            "translation": "–∫—Ä—É–ø–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –ø—ã–ª–∏",
            "emoji": "üí®",
        },
        "pm2_5": {
            "–•–æ—Ä–æ—à–∏–π": [0, 10],
            "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π": [10, 25],
            "–£–º–µ—Ä–µ–Ω–Ω—ã–π": [25, 50],
            "–ë–µ–¥–Ω—ã–π": [59, 75],
            "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ": [75, float("inf")],
            "translation": "–º–µ–ª–∫–æ–¥–∏—Å–ø–µ—Ä—Å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã",
            "emoji": "üå´Ô∏è",
        },
        "o3": {
            "–•–æ—Ä–æ—à–∏–π": [0, 60],
            "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π": [60, 100],
            "–£–º–µ—Ä–µ–Ω–Ω—ã–π": [100, 140],
            "–ë–µ–¥–Ω—ã–π": [140, 180],
            "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ": [180, float("inf")],
            "translation": "–æ–∑–æ–Ω",
            "emoji": "‚òÄÔ∏è",
        },
        "co": {
            "–•–æ—Ä–æ—à–∏–π": [0, 4400],
            "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π": [4400, 9400],
            "–£–º–µ—Ä–µ–Ω–Ω—ã–π": [9400, 12400],
            "–ë–µ–¥–Ω—ã–π": [12400, 15400],
            "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ": [15400, float("inf")],
            "translation": "–æ–∫—Å–∏–¥ —É–≥–ª–µ—Ä–æ–¥–∞",
            "emoji": "üî•",
        },
        "no2": {
            "–•–æ—Ä–æ—à–∏–π": [0, 40],
            "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π": [40, 70],
            "–£–º–µ—Ä–µ–Ω–Ω—ã–π": [70, 150],
            "–ë–µ–¥–Ω—ã–π": [150, 200],
            "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ": [200, float("inf")],
            "translation": "–¥–∏–æ–∫—Å–∏–¥ –∞–∑–æ—Ç–∞",
            "emoji": "üöó",
        },
    }  # –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞

    LOCATION_WEATHER: List[float] = [
        55.751244,
        37.618423,
    ]  # –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤–∞
    WEATHER_LAYERS: Dict = {
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "temp_new",
        "–û–±–ª–∞–∫–∞": "clouds_new",
        "–û—Å–∞–¥–∫–∏": "precipitation_new",
        "–î–∞–≤–ª–µ–Ω–∏–µ": "pressure_new",
        "–í–µ—Ç–µ—Ä": "wind_new",
    }  # –°–ø–∏—Å–æ–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö —Å–ª–æ—ë–≤ OpenWeatherMap
    AQI: Dict = {
        1: "–•–æ—Ä–æ—à–∏–π",
        2: "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π",
        3: "–°—Ä–µ–¥–Ω–∏–π",
        4: "–ü–ª–æ—Ö–æ–π",
        5: "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–π",
    }  # –°–ª–æ–≤–∞—Ä—å –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
    PATH_COOGLE_DRIVER: str = (
        "static\\browser_drivers\\chromedriver_109\\chromedriver.exe"
    )
    VIDEO_GENERATE_IMAGE_PATH: str = "static\\img\\generate_video\\"  # –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–∫–∏–¥—ã–≤–∞–µ–º–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    # –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    VIDEO_GENERATE_VIDEO_PATH: str = (
        "static\\video\\generate_video\\"  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –≤–∏–¥–µ–æ
    )

    find_image: FindImage = FindImage()
    modelimage: ImageGeneration = ImageGeneration()
    image_description: ImageDescription = ImageDescription()
    find_video: FindVideo = FindVideo()
    proxies: Proxies = Proxies()
    ip_info: IpInfo = IpInfo()
    recommender_system: RecommenderSystem = RecommenderSystem()
    password_generation: PasswordGeneration = PasswordGeneration()
    video_generation: VideoGeneration = VideoGeneration()
    logging: LoggingSettings = LoggingSettings()


settings = Settings()
